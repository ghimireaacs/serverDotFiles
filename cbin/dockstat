#!/bin/zsh

# A script to display Docker containers with ASCII art at the top
# and a Catppuccin-themed, box-drawn table below.

# --- Catppuccin Mocha Color Palette (24-bit) ---
BLUE='\e[38;2;137;180;250m'
TEAL='\e[38;2;148;226;213m'
YELLOW='\e[38;2;249;226;175m'
GREEN='\e[38;2;166;227;161m'
LAVENDER='\e[38;2;180;190;254m'
OVERLAY1='\e[38;2;110;115;141m'
TEXT='\e[38;2;205;214;244m'
BOLD='\e[1m'
COLOR_RESET='\e[0m'

# --- Column Widths ---
local -i NAME_WIDTH=25
local -i STATUS_WIDTH=45
local -i PORTS_WIDTH=22

# --- Box Drawing Characters ---
BOX_V="│" BOX_H="─" BOX_TL="┌" BOX_TR="┐" BOX_BL="└" BOX_BR="┘"
BOX_MJ="┴" BOX_TJ="┬" BOX_LJ="├" BOX_RJ="┤" BOX_C="┼"

# --- Docker Whale ASCII Art ---
WHALE_ART=(
    "                  ##         .            "
    "            ## ## ##        ==            "
    "         ## ## ## ## ##    ===            "
    "     /\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"___/ ===        "
    "~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~   "
    " \\______ o           __/            "
    "  \\    \\         __/             "
    "   \\____\\_______/                  "
)

# --- Helper function to clean port strings ---
function get_clean_ports() {
    local raw_ports=$1
    [ -z "$raw_ports" ] && echo "N/A" && return
    local cleaned=$(echo "$raw_ports" | grep -oP '(?<=:)\d+(?=->)|\d+(?=/tcp)' | sort -u | paste -sd ', ' -)
    [ -z "$cleaned" ] && echo "N/A" || echo "$cleaned"
}

# --- Main Logic ---
# Check for Docker
if ! docker --version &> /dev/null; then
    echo -e "${YELLOW}Docker daemon is not running or Docker is not installed.${COLOR_RESET}"
    exit 1
fi

# Pre-fetch all container data into arrays
local -a names statuses ports
while IFS='|' read -r container_name container_status raw_ports; do
    names+=("$container_name")
    statuses+=("$container_status")
    ports+=("$(get_clean_ports "$raw_ports")")
done < <(docker ps -a --format "{{.Names}}|{{.Status}}|{{.Ports}}")

NUM_CONTAINERS=${#names[@]}

# --- Print the ASCII Art ---
echo
for line in "${WHALE_ART[@]}"; do
    echo -e "${TEAL}${line}${COLOR_RESET}"
done
echo

# --- Print the Table ---
if [ $NUM_CONTAINERS -eq 0 ]; then
    echo -e "${GREEN}No Docker containers found.${COLOR_RESET}"
    exit 0
fi

# Helper function to repeat a character
repeat_char() { for i in {1..$2}; do echo -n "$1"; done; }

# Top border
TOP_BORDER="${BOX_TL}$(repeat_char $BOX_H $((NAME_WIDTH+2)))${BOX_TJ}$(repeat_char $BOX_H $((STATUS_WIDTH+2)))${BOX_TJ}$(repeat_char $BOX_H $((PORTS_WIDTH+2)))${BOX_TR}"
echo -e "${OVERLAY1}${TOP_BORDER}${COLOR_RESET}"

# Header row
HEADER_ROW="${BOLD}${LAVENDER}$(printf "%s %-${NAME_WIDTH}s %s %-${STATUS_WIDTH}s %s %-${PORTS_WIDTH}s %s" "$BOX_V" "NAME" "$BOX_V" "STATUS" "$BOX_V" "PORTS" "$BOX_V")${COLOR_RESET}"
echo -e "$HEADER_ROW"

# Separator between header and content
SEPARATOR="${BOX_LJ}$(repeat_char $BOX_H $((NAME_WIDTH+2)))${BOX_C}$(repeat_char $BOX_H $((STATUS_WIDTH+2)))${BOX_C}$(repeat_char $BOX_H $((PORTS_WIDTH+2)))${BOX_RJ}"
echo -e "${OVERLAY1}${SEPARATOR}${COLOR_RESET}"

# Data Rows
for i in {1..$NUM_CONTAINERS}; do
    local current_name=${names[$i]}
    local current_status=${statuses[$i]}
    local current_ports=${ports[$i]}
    
    # Truncate if necessary BEFORE padding
    (( ${#current_name} > NAME_WIDTH )) && current_name="${current_name:0:$((NAME_WIDTH-3))}..."
    (( ${#current_status} > STATUS_WIDTH )) && current_status="${current_status:0:$((STATUS_WIDTH-3))}..."
    
    # Pad the plain text to the correct width, then apply color
    local padded_name=$(printf " %-${NAME_WIDTH}s " "$current_name")
    local padded_status=$(printf " %-${STATUS_WIDTH}s " "$current_status")
    local padded_ports=$(printf " %-${PORTS_WIDTH}s " "$current_ports")

    local name_cell="${BLUE}${padded_name}${COLOR_RESET}"
    local status_cell="${GREEN}${padded_status}${COLOR_RESET}"
    local ports_cell="${YELLOW}${padded_ports}${COLOR_RESET}"
    
    local table_line=$(printf "${OVERLAY1}%s${COLOR_RESET}%s${OVERLAY1}%s${COLOR_RESET}%s${OVERLAY1}%s${COLOR_RESET}%s${OVERLAY1}%s${COLOR_RESET}" "$BOX_V" "$name_cell" "$BOX_V" "$status_cell" "$BOX_V" "$ports_cell" "$BOX_V")
    echo -e "$table_line"
done

# Bottom border
BOTTOM_BORDER="${BOX_BL}$(repeat_char $BOX_H $((NAME_WIDTH+2)))${BOX_MJ}$(repeat_char $BOX_H $((STATUS_WIDTH+2)))${BOX_MJ}$(repeat_char $BOX_H $((PORTS_WIDTH+2)))${BOX_BR}"
echo -e "${OVERLAY1}${BOTTOM_BORDER}${COLOR_RESET}"
echo
